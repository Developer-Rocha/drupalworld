<?php

use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\MigrateExecutable;
use Drupal\migrate\MigrateMessage;

/**
 * Implements hook_cron().
 */
function tmdb_movies_cron() {
  $migrationID = 'tmdb_movies';

  try {
    /** @var \Drupal\migrate\Plugin\Migration $migration */
    $migration = \Drupal::service('plugin.manager.migration')
      ->createInstance($migrationID);

    // Checks if the migration is idle, if not, resets the status.
    if (!$migration || $migration->getStatus() !== MigrationInterface::STATUS_IDLE) {
      $migration->setStatus(MigrationInterface::STATUS_IDLE);
    }
  } catch (\Exception $e) {
    \Drupal::logger('tmdb_movies')->error('The "@migration" migration is not ready to be executed.', ['@migration' => $migrationID]);
    return;
  }

  // Prepares the ID map for updating and synchronizes the source.
  $migration->getIdMap()->prepareUpdate();
  $migration->set('syncSource', TRUE);

  // Run the migration.
  $executable = new MigrateExecutable($migration, new MigrateMessage());
  $status = $executable->import();

  if ($status) {
    \Drupal::logger('tmdb_movies')->notice('Migration "@migration" successfully executed.', ['@migration' => $migrationID]);
  } else {
    \Drupal::logger('tmdb_movies')->error('Error in "@migration" migration.', ['@migration' => $migrationID]);
  }
}

/**
 * Implements hook_migration_post_import().
 */
function tmdb_movies_migration_post_import(array $migration_ids, \Drupal\migrate\Event\MigratePostRowSaveEvent $event) {
  if (in_array('tmdb_movies', $migration_ids)) {
    $node_storage = \Drupal::entityTypeManager()->getStorage('node');
    $movies = $node_storage->loadByProperties(['type' => 'movies']);

    $ai_automator = \Drupal::service('ai_automator.entity_modifier');

    foreach ($movies as $movie) {
      $ai_automator->saveEntity($movie, TRUE);
    }
  }
}

