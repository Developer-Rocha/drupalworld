<?php
/**
 * @file
 * template.php
 */

use Drupal\Component\Plugin\Exception\PluginException;
use Drupal\Component\Utility\Html;
use Drupal\Core\Template\Attribute;
use Drupal\node\Entity\Node;
use Drupal\Core\Routing\RouteMatchInterface;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpFoundation\Request;

/**
 * Implements hook_preprocess_block().
 */
function drupalizer_preprocess_block(&$variables) {

  switch ($variables['base_plugin_id']) {
    case 'language_block':
      $current_language = Drupal::languageManager()->getCurrentLanguage();
      $variables['current_language_id'] = $current_language->getId();
      $variables['current_language_name'] = $current_language->getName();
      break;
  }
//  switch ($variables['plugin_id']) {
//
//  }
}

/**
 * Implements hook_preprocess_page().
 */
function drupalizer_preprocess_page(&$variables) {
  $site_config = \Drupal::config('system.site');
  $route_match = \Drupal::service('current_route_match');

  if ($route_match->getParameter('node') instanceof Node) {
    $node = $route_match->getParameter('node');

    if ($node) {
      $variables['is_node'] = TRUE;
      $variables['node_type'] = $node->getType();
    }
  }

  // Site name.
  $variables['site_name'] = $site_config->get('name');

  // Site slogan
  $variables['site_slogan'] = $site_config->get('slogan');

  // Page title
  $variables['page_title'] = $variables['page']['#title'];

  // Add layout variables
  $variables['content_attributes'] = new Attribute();
  $variables['sidebar_left_attributes'] = new Attribute();
  $variables['sidebar_right_attributes'] = new Attribute();

  $variables['layout_attributes'] = new Attribute();
  $variables['layout_attributes']->addClass('page-layout');

  // Add breadcrumb
  $variables['breadcrumb'] = _drupalizer_get_breadcrumb();

  // Check for sidebars
  $sidebar_left = $variables['page']['sidebar_left'];
  $sidebar_right = $variables['page']['sidebar_right'];
  if ($sidebar_left && $sidebar_right) {
    $variables['layout_attributes']->addClass('page-layout--sidebar', 'page-layout--sidebar--both');
  }
  else {
    if ($sidebar_left) {
      $variables['layout_attributes']->addClass('page-layout--sidebar', 'page-layout--sidebar--left');
    }
    else {
      if ($sidebar_right) {
        $variables['layout_attributes']->addClass('page-layout--sidebar', 'page-layout--sidebar--right');
      }
    }
  }

  // Check if the URL contains a language prefix.
  $language_manager = \Drupal::languageManager();
  $languages = $language_manager->getLanguages();
  $hide_language_bar_region = FALSE;

  $url = \Drupal::request()->getRequestUri();
  $prefix = NULL;

  if (preg_match('/^\/([a-z]{2}(-[a-z]{2})?)($|\/)/', $url, $matches)) {
    $prefix = $matches[1];
  }
  foreach ($languages as $language) {
    if ($language->getId() === $prefix || ($prefix !== NULL)) {
      // Language prefix found or no prefix in the URL with the current language, unset the flag to show the "language-bar" region.
      $hide_language_bar_region = TRUE;
      break;
    }
  }

  // Add the flag to the template variables.
  $variables['hide_language_bar_region'] = $hide_language_bar_region;
}


/**
 * Implements hook_preprocess_node().
 */
function drupalizer_preprocess_node(&$variables) {

  if (isset($variables['elements']['#node'])) {
    $node = $variables['elements']['#node'];
    $css_node_type = Html::cleanCssIdentifier($node->getType());
    $css_view_mode = Html::cleanCssIdentifier($variables['elements']['#view_mode']);

    // Change modifier classes to use BEM syntax.
    if (!isset($variables['attributes']['class']) || !is_array($variables['attributes']['class'])) {
      $variables['attributes']['class'] = [];
    }

    // Add modifier classes for node type.
    $variables['attributes']['class'] = preg_replace('/^node--type-' . $css_node_type . '$/', 'node--' . $css_node_type, $variables['attributes']['class']);
    if (!in_array('node--' . $css_node_type, $variables['attributes']['class'])) {
      $variables['attributes']['class'][] = 'node--' . $css_node_type;
    }

    // Add modifier classes for view mode.
    $variables['attributes']['class'] = preg_replace('/^node--view-mode-' . $css_view_mode . '$/', 'node--' . $css_view_mode, $variables['attributes']['class']);
    if (!in_array('node--' . $css_view_mode, $variables['attributes']['class'])) {
      $variables['attributes']['class'][] = 'node--' . $css_view_mode;
    }

    // Add node class.
    if (!in_array('node', $variables['attributes']['class'])) {
      $variables['attributes']['class'][] = 'node';
    }

    // Add modifier classes for view mode.
    $variables['attributes']['class'][] = 'node--' . $css_node_type . '--' . $css_view_mode;
  }

  // View mode 'Full' specific additions.
  if ($variables['view_mode'] == 'full' && $node && (node_is_page($node) || !$node->isDefaultRevision())) {

    // Add breadcrumb
    $variables['breadcrumb'] = _drupalizer_get_breadcrumb();

    // Add hero attributes
    $variables['hero_attributes'] = new Attribute();
  }
}


/**
 * Implements hook_preprocess_HOOK() for pattern-breadcrumbs.html.twig.
 */
//function drupalizer_preprocess_pattern_breadcrumbs(array &$variables) {
//  $breadcrumb = $variables['breadcrumb'];
//
//  if(isset($breadcrumb['#links'])) {
//    foreach ($breadcrumb['#links'] as $item) {
//      // Get the text of the label.
//      $text = $item->getText();
//      // Check if the text is a number type (ID).
//      if (ctype_digit($text)){
//        $node = Node::load($text);
//        if ($node) {
//          // Set the new text and URL for the breadcrumb item.
//          $item->setText($node->getTitle());
//          $item->setUrl($node->toUrl());
//        }
//      }
//    }
//  }
//}

/**
 * Get breadcrumb.
 *
 * @return array
 *   The breadcrumb render array.
 */
function _drupalizer_get_breadcrumb() {
  $breadcrumb = &drupal_static(__FUNCTION__, FALSE);
  if (!$breadcrumb) {
    $block_manager = \Drupal::service('plugin.manager.block');
    $breadcrumb_block = $block_manager->createInstance('system_breadcrumb_block', []);

    // Render the block
    $breadcrumb_block_content = $breadcrumb_block->build();

    // Inject the rendered block into $variables['breadcrumb']
    $breadcrumb = $breadcrumb_block_content;
  }

  return $breadcrumb;
}
